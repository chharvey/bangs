extends _docs.tpl.pug

block append vars
  - let page = Docs.DOCS.find('/docs/props.html')
  mixin proptoc(args, inner)
    //- NOTE parameter validation
    -
      var pages   = args.pages   || []
      var depth   = +args.depth  || 0
    ol&attributes(inner ? { class: '-mb-0' } : { role: 'tree' })
      each item in pages
        li
          if item.findAll().length && depth > 0
            | <details class="-mb-u -mb-0">
            |   <summary>
          a(href=item.url())= item.name()
          if item.findAll().length && depth > 0
            |   </summary>
            +proptoc({pages: item.findAll(), depth: depth-1}, true)
            | </details>
        //- NOTE equivalent:
        //- li
          if item.findAll().length && depth > 0
            details
              summary: a(href=item.url())= item.name()
              +proptoc({pages: item.findAll(), depth: depth-1}, true)
          else
            a(href=item.url())= item.name()
  mixin stabilityLevel(stab)
    p.o-Alert(class=`t-stability-${stab.name}`)
      span.o-Alert__Hn.h-Block
        span.h-Block.-ps-a= `Stability ${Bangs.GLOBAL.stability_levels.indexOf(stab)}:`
        b.-tt-h.-tt-uc= `${stab.name.charAt(0).toUpperCase() + stab.name.slice(1)}`
      span.h-Block= stab.description

block toc
  nav#contents
    h2 Contents
    +proptoc({pages: page.findAll(), depth: 1})

block append main
  aside.-mh-1#stability-levels
    h2 Stability Levels
    p.
      Please note the following stability levels.
      Each CSS property in this project is assigned a level describing its stability;
      some values or pseudo-classes under a property might possibly have their own level,
      in which case this would override the property&rsquo;s stability level.
    p.
      For example, the group of classes #[code .-d] (corresponding to the CSS property #[code display])
      might have Stability 4, but #[code .-d-fx] (for #[code display: flex]) could have Stability 3, and
      #[code .-d-il-nK] (for #[code display: inline] on extra-small screens) could have Stability 2.
    ol.o-List
      each item in Bangs.GLOBAL.stability_levels
        li.o-List__Item: +stabilityLevel(item)
  section#properties
    h2 Properties
    each subpage in page.findAll()
      - let id = subpage.url().split('#')[1]
      section._ss(id=id)
        h3
          = subpage.name()
          //- = Xmeter.view({id: id}).permalink()
        each propertypage in subpage.findAll()
          - let property = Bangs.DATA.find((p) => p.name===propertypage.name())
          if property
            section.c-Property(id=property.name)
              -
                let supported_media = Bangs.GLOBAL.media.filter((m) => !(property.non_media || []).includes(m.name))
                let supported_pseudos = Bangs.GLOBAL.pseudo.filter((p) => (property.pseudo || []).includes(p.name))
              mixin codeTerm(str, num)
                dt
                  code= str
                  if num >= 0
                    - let stab = Bangs.GLOBAL.stability_levels[num]
                    small.c-Label(class=`t-stability-${stab.name}` title=stab.description): b= stab.name
              h4.-fz-giga
                = property.name
                != Xmeter.view({id: property.name}).permalink()
              blockquote.c-Property__Desc
                a(href=property.url rel="external")= property.summary
                if property.inherited
                  small.c-Label.c-Label--inherited
                    a(title="read about inherited properties" href="https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance" rel="external")
                      | inherited
              +stabilityLevel(Bangs.GLOBAL.stability_levels[property.stability])
              dl.c-Property__Classes
                - function classname(val) { return `.-${property.code}-${val}` }
                mixin item(value, code)
                  +codeTerm(classname(code), value.stability)
                  dd
                    code= value.name
                    if value.name === property.initial
                      small.c-Label.c-Label--initial
                        a(title="read about initial values" href="https://developer.mozilla.org/en-US/docs/Web/CSS/initial_value" rel="external")
                          | initial value
                  dd: div(class=classname(code).slice(1)): span(class=classname(code).slice(1)) Test
                each value in Bangs.GLOBAL.values.concat(property.values)
                  each c in (Array.isArray(value.code) ? value.code : [value.code])
                    +item(value, c)
              if supported_media.length || supported_pseudos.length
                dl.c-Property__Classes.c-Property__Classes--suffixes
                  each at_rule in supported_media
                    +codeTerm(`-${at_rule.code}`, at_rule.stability)
                    dd: code= at_rule.name
                  each ext in supported_pseudos
                    +codeTerm(`-${ext.code}`, ext.stability)
                    dd: code= ext.name
          else
            section.c-Property
              h4.-fz-giga #{propertypage.name()} Not Found
