
/*################################*\
    bangs  |  _flex.less
\*################################*/
@import (reference) url('../node_modules/xmeter/src/__fallback.flexbox.less');

// # Syntax:
//
//     none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
//
// ## One value:
// - initial            =      0         1        auto
// - none               =      0         0        auto
// - auto               =      1         1        auto
// - content            =      1         1      content
// - <number>           = <flex-grow>    1         0
// - <width-percentage> =      1         1    <flex-basis>
// ## Two values:
// - <number> <number>           = <flex-grow>    <flex-shrink>         0
// - <number> <width-percentage> = <flex-grow>         1           <flex-basis>
// ## Three values:
// - <number> <number> <width-percentage> = <flex-grow>    <flex-shrink>    <flex-basis>
//
// # Examples:
// (For brevity we will assume `flex-direction: row` and the **main size** refers to `width`.)
//
// ## `flex: initial`
// Equivalent to `flex: 0 1 auto`.
// The item is sized to its `width` value, or its contents if it is not given,
// but may shrink if there is not enough space in the container.
//
// ## `flex: none`
// Equivalent to `flex: 0 0 auto`.
// The item is sized to its `width` value, or its contents if it is not given,
// and is **fully inflexible** (will neither grow nor shrink).
//
// ## `flex: auto`
// Equivalent to `flex: 1 1 auto`.
// The item is sized to its `width` value, or its contents if it is not given,
// but is **fully flexible** (will either grow or shrink, based on the available space in the container).
//
// ## `flex: content`
// Equivalent to `flex: 1 1 content`.
// The item is sized to its contents, but is fully flexible.
//
// ## `flex: <number>`
// Equivalent to `flex: <flex-grow> 1 0`.
// The item is sized as small as possible, but is fully flexible,
// and will grow in proportion to its `<flex-grow>` value (as compared to that of other flex items).
//
// ### `flex: 1`
// Equivalent to `flex: 1 1 0`.
// The item is sized as small as possible, but is fully flexible.
//
// ### `flex: 0` (unitless zero)
// Equivalent to `flex: 0 1 0`.
// The item is sized as small as possible and is fully inflexible.
//
// ## `flex: <width-percentage>`
// Equivalent to `flex: 1 1 <flex-basis>`.
// The item is sized to the specified `<width-percentage>` value, and is fully flexible.
//
// ### `flex: 0%` (zero with any unit)
// Equivalent to `flex: 1 1 0`.
// Also equivalent to `flex: 1`.
// The item is sized as small as possible, but is fully flexible.

// ^author
// : Chris Harvey
// ^updated
// : 2017-04-22

.-x-0 { .flex(0 1 auto) !important; .flex(initial) !important; }
.-x-i {                             .flex(inherit) !important; }
.-x-a {                             .flex(auto)    !important; }
.-x-c {                             .flex(content) !important; }
.-x-z {                             .flex(0)       !important; }
.-x-h {                             .flex(0.5)     !important; }
.-x-1 {                             .flex(1)       !important; }
.-x-2 {                             .flex(2)       !important; }

@media screen {
  .-x-0-s { .-x-0; }
  .-x-i-s { .-x-i; }
  .-x-a-s { .-x-a; }
  .-x-c-s { .-x-c; }
  .-x-z-s { .-x-z; }
  .-x-h-s { .-x-h; }
  .-x-1-s { .-x-1; }
  .-x-2-s { .-x-2; }
}

@media print {
  .-x-0-p { .-x-0; }
  .-x-i-p { .-x-i; }
  .-x-a-p { .-x-a; }
  .-x-c-p { .-x-c; }
  .-x-z-p { .-x-z; }
  .-x-h-p { .-x-h; }
  .-x-1-p { .-x-1; }
  .-x-2-p { .-x-2; }
}

@media screen and (min-width: 30em) {
  .-x-0-sK { .-x-0; }
  .-x-i-sK { .-x-i; }
  .-x-a-sK { .-x-a; }
  .-x-c-sK { .-x-c; }
  .-x-z-sK { .-x-z; }
  .-x-h-sK { .-x-h; }
  .-x-1-sK { .-x-1; }
  .-x-2-sK { .-x-2; }
}

@media screen and (min-width: 45em) {
  .-x-0-sM { .-x-0; }
  .-x-i-sM { .-x-i; }
  .-x-a-sM { .-x-a; }
  .-x-c-sM { .-x-c; }
  .-x-z-sM { .-x-z; }
  .-x-h-sM { .-x-h; }
  .-x-1-sM { .-x-1; }
  .-x-2-sM { .-x-2; }
}

@media screen and (min-width: 60em) {
  .-x-0-sG { .-x-0; }
  .-x-i-sG { .-x-i; }
  .-x-a-sG { .-x-a; }
  .-x-c-sG { .-x-c; }
  .-x-z-sG { .-x-z; }
  .-x-h-sG { .-x-h; }
  .-x-1-sG { .-x-1; }
  .-x-2-sG { .-x-2; }
}

@media screen and (min-width: 75em) {
  .-x-0-sT { .-x-0; }
  .-x-i-sT { .-x-i; }
  .-x-a-sT { .-x-a; }
  .-x-c-sT { .-x-c; }
  .-x-z-sT { .-x-z; }
  .-x-h-sT { .-x-h; }
  .-x-1-sT { .-x-1; }
  .-x-2-sT { .-x-2; }
}

@media screen and (min-width: 90em) {
  .-x-0-sP { .-x-0; }
  .-x-i-sP { .-x-i; }
  .-x-a-sP { .-x-a; }
  .-x-c-sP { .-x-c; }
  .-x-z-sP { .-x-z; }
  .-x-h-sP { .-x-h; }
  .-x-1-sP { .-x-1; }
  .-x-2-sP { .-x-2; }
}

@media not all and (min-width: 30em) {
  .-x-0-nK { .-x-0; }
  .-x-i-nK { .-x-i; }
  .-x-a-nK { .-x-a; }
  .-x-c-nK { .-x-c; }
  .-x-z-nK { .-x-z; }
  .-x-h-nK { .-x-h; }
  .-x-1-nK { .-x-1; }
  .-x-2-nK { .-x-2; }
}

@media not all and (min-width: 45em) {
  .-x-0-nM { .-x-0; }
  .-x-i-nM { .-x-i; }
  .-x-a-nM { .-x-a; }
  .-x-c-nM { .-x-c; }
  .-x-z-nM { .-x-z; }
  .-x-h-nM { .-x-h; }
  .-x-1-nM { .-x-1; }
  .-x-2-nM { .-x-2; }
}

@media not all and (min-width: 60em) {
  .-x-0-nG { .-x-0; }
  .-x-i-nG { .-x-i; }
  .-x-a-nG { .-x-a; }
  .-x-c-nG { .-x-c; }
  .-x-z-nG { .-x-z; }
  .-x-h-nG { .-x-h; }
  .-x-1-nG { .-x-1; }
  .-x-2-nG { .-x-2; }
}

@media not all and (min-width: 75em) {
  .-x-0-nT { .-x-0; }
  .-x-i-nT { .-x-i; }
  .-x-a-nT { .-x-a; }
  .-x-c-nT { .-x-c; }
  .-x-z-nT { .-x-z; }
  .-x-h-nT { .-x-h; }
  .-x-1-nT { .-x-1; }
  .-x-2-nT { .-x-2; }
}

@media not all and (min-width: 90em) {
  .-x-0-nP { .-x-0; }
  .-x-i-nP { .-x-i; }
  .-x-a-nP { .-x-a; }
  .-x-c-nP { .-x-c; }
  .-x-z-nP { .-x-z; }
  .-x-h-nP { .-x-h; }
  .-x-1-nP { .-x-1; }
  .-x-2-nP { .-x-2; }
}
